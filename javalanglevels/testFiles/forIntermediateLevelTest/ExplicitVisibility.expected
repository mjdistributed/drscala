public class ExplicitVisibility {
  final private int i;
  final public int q;
  
  public int explicitMethod() {
    return i;
  }

  /** This method is automatically generated by the Language Level Converter. */
  public ExplicitVisibility(int i, int q) {
    super();
    this.i = i;
    this.q = q;
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int i() {
    return i;
  }

  /** This method is automatically generated by the Language Level Converter. */
  public int q() {
    return q;
  }

  /**
   * This method is automatically generated by the LanguageLevelConverter.
   * As a helper to toString(), it recursively generates a string for any object,
   * including nulls, arrays, and standard reference types.
   */
  private java.lang.String __valueToString(java.lang.Object o) {

    class ArrayToString {

      public String valueFor(java.lang.Object o) {
        if (o instanceof java.lang.Object[]) {
          return arrayToString((java.lang.Object[]) o, new java.util.HashSet<java.lang.Object[]>());
        }
        else if (o instanceof byte[]) {
          return arrayToString((byte[]) o);
        }
        else if (o instanceof short[]) {
          return arrayToString((short[]) o);
        }
        else if (o instanceof char[]) {
          return arrayToString((char[]) o);
        }
        else if (o instanceof int[]) {
          return arrayToString((int[]) o);
        }
        else if (o instanceof long[]) {
          return arrayToString((long[]) o);
        }
        else if (o instanceof float[]) {
          return arrayToString((float[]) o);
        }
        else if (o instanceof double[]) {
          return arrayToString((double[]) o);
        }
        else if (o instanceof boolean[]) {
          return arrayToString((boolean[]) o);
        }
        else {
          // o should be an array, but if not, toString() is called
          return o.toString();
        }
      }

      public java.lang.String arrayToString(byte[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(short[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(char[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(int[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(long[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(float[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(double[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(boolean[] array) {
        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        if (array.length > 0) { result.append(array[0]); }
        for (int i = 1; i < array.length; i++) {
          result.append(", ");
          result.append(array[i]);
        }
        result.append("]");
        return result.toString();
      }

      public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet<java.lang.Object[]> alreadyPrinted) {
        if (alreadyPrinted.contains(array)) { return ("[...]"); }
        else { alreadyPrinted.add(array); }

        java.lang.StringBuffer result = new java.lang.StringBuffer();
        result.append("[");
        boolean nonEmpty = false;
        for (int i = 0; i < array.length; i++) {
          if (nonEmpty) { result.append(", "); }
          nonEmpty = true;

          if (array[i] instanceof java.lang.Object[]) {
            result.append(arrayToString((java.lang.Object[]) array[i], alreadyPrinted));
          }
          else {
            result.append(__valueToString(array[i]));
          }
        }
        result.append("]");

        alreadyPrinted.remove(array);
        return result.toString();
      }

    }

    if (o == null) { return "" + null; }
    else if (o.getClass().isArray()) { return new ArrayToString().valueFor(o); }
    else { return o.toString(); }
  }

  /**
   * This method is automatically generated by the LanguageLevelConverter.
   * As a helper to equals(Object), it recursively compares any two objects,
   * including nulls, arrays, and standard reference types.
   */
  private boolean __valueEquals(java.lang.Object o1, java.lang.Object o2) {

    class ArrayEquals {

      public boolean valueFor(java.lang.Object o1, java.lang.Object o2) {
        if (o1 instanceof java.lang.Object[] && o2 instanceof java.lang.Object[]) {
          return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet<java.lang.Object>());
        }
        else if (o1 instanceof byte[] && o2 instanceof byte[]) {
          return arrayEquals((byte[]) o1, (byte[]) o2);
        }
        else if (o1 instanceof short[] && o2 instanceof short[]) {
          return arrayEquals((short[]) o1, (short[]) o2);
        }
        else if (o1 instanceof char[] && o2 instanceof char[]) {
          return arrayEquals((char[]) o1, (char[]) o2);
        }
        else if (o1 instanceof int[] && o2 instanceof int[]) {
          return arrayEquals((int[]) o1, (int[]) o2);
        }
        else if (o1 instanceof long[] && o2 instanceof long[]) {
          return arrayEquals((long[]) o1, (long[]) o2);
        }
        else if (o1 instanceof float[] && o2 instanceof float[]) {
          return arrayEquals((float[]) o1, (float[]) o2);
        }
        else if (o1 instanceof double[] && o2 instanceof double[]) {
          return arrayEquals((double[]) o1, (double[]) o2);
        }
        else if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
          return arrayEquals((boolean[]) o1, (boolean[]) o2);
        }
        else {
          // o1 and o2 should be arrays, but if not, or if they have different types, equals(Object) is called
          return o1.equals(o2);
        }
      }

      public boolean arrayEquals(byte[] array1, byte[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(short[] array1, short[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(char[] array1, char[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(int[] array1, int[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(long[] array1, long[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(float[] array1, float[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(double[] array1, double[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(boolean[] array1, boolean[] array2) {
        if (array1.length != array2.length) { return false; }

        else {
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) { return false; }
          }
          return true;
        }
      }

      public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet<java.lang.Object> alreadyCompared) {

        class ArrayPair {
          public java.lang.Object[] array1() { return array1; }
          public java.lang.Object[] array2() { return array2; }
          public boolean equals(java.lang.Object o) {
            if ((o == null) || ! (o instanceof ArrayPair)) { return false; }
            else { return (array1.equals(((ArrayPair) o).array1())) && (array2.equals(((ArrayPair) o).array2())); }
          }
          public int hashCode() { return array1.hashCode() ^ (array2.hashCode() << 1); }
        }

        if (array1.length != array2.length) { return false; }

        else {
          ArrayPair currentPair = new ArrayPair();
          if (alreadyCompared.contains(currentPair)) { return true; }
          alreadyCompared.add(currentPair);

          boolean result = true;
          for (int i = 0; i < array1.length; i++) {
            if (array1[i] instanceof java.lang.Object[] && array2[i] instanceof java.lang.Object[]) {
              result = arrayEquals((java.lang.Object[]) array1[i], (java.lang.Object[]) array2[i], alreadyCompared);
            }
            else {
              result = __valueEquals(array1[i], array2[i]);
            }

            if (!result) { break; }
          }

          alreadyCompared.remove(currentPair);
          return result;
        }
      }

    }

    if (o1 == null) { return o2 == null; }
    else if (o2 == null) { return false; }
    else if (o1.getClass().isArray() && o2.getClass().isArray()) { return new ArrayEquals().valueFor(o1, o2); }
    else { return o1.equals(o2); }
  }

  /**
   * This method is automatically generated by the LanguageLevelConverter.
   * As a helper to hashCode(), it recursively generates a hash code for any object,
   * including nulls, arrays, and standard reference types.
   */
  private int __valueHashCode(java.lang.Object o) {

    class ArrayHashCode {

      public int valueFor(java.lang.Object o) {
        if (o instanceof java.lang.Object[]) {
          return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());
        }
        else if (o instanceof byte[]) {
          return arrayHashCode((byte[]) o);
        }
        else if (o instanceof short[]) {
          return arrayHashCode((short[]) o);
        }
        else if (o instanceof char[]) {
          return arrayHashCode((char[]) o);
        }
        else if (o instanceof int[]) {
          return arrayHashCode((int[]) o);
        }
        else if (o instanceof long[]) {
          return arrayHashCode((long[]) o);
        }
        else if (o instanceof float[]) {
          return arrayHashCode((float[]) o);
        }
        else if (o instanceof double[]) {
          return arrayHashCode((double[]) o);
        }
        else if (o instanceof boolean[]) {
          return arrayHashCode((boolean[]) o);
        }
        else {
          // o should be an array, but if not, hashCode() is called
          return o.hashCode();
        }
      }

      public int arrayHashCode(byte[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(short[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(char[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(int[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(long[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(float[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(double[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (int) array[i];
        }
        return result;
      }

      public int arrayHashCode(boolean[] array) {
        int result = 0;
        for (int i = 0; i < array.length; i++) {
          result = (result << 1) ^ (array[i] ? 1 : 0);
        }
        return result;
      }

      public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList<java.lang.Object> alreadyGenerated) {

        class ArrayWrapper {
          public java.lang.Object[] array() { return array; }
          public boolean equals(java.lang.Object o) {
            return (o != null) && (o instanceof ArrayWrapper)  && __valueEquals(array, ((ArrayWrapper) o).array());
          }
          public int hashCode() { return 0; } // This method should never be used -- only here for consistency.
        }

        ArrayWrapper currentWrapper = new ArrayWrapper();
        if (alreadyGenerated.contains(currentWrapper)) { return -1; }
        alreadyGenerated.addLast(currentWrapper);

        int result = 0;
        for (int i = 0; i < array.length; i++) {
          if (array[i] instanceof java.lang.Object[]) {
            result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);
          }
          else {
            result = (result << 1) ^ __valueHashCode(array[i]);
          }
        }

        alreadyGenerated.removeLast();
        return result;
      }

    }

    if (o == null) { return 0; }
    else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }
    else { return o.hashCode(); }
  }

  /** This field is automatically generated by the Language Level Converter. */
  private boolean __toStringFlag = false;

  /** This method is automatically generated by the Language Level Converter. */
  public java.lang.String toString() {
    if (__toStringFlag) {
      return getClass().getName() + "(...)";
    }
    else {
      __toStringFlag = true;
      String result;
      try {
        result = getClass().getName() + "(" + 
            __valueToString(i()) + ", " + 
            __valueToString(q()) + 
            ")";
      }
      catch (RuntimeException e) {
        __toStringFlag = false;
        throw e;
      }
      __toStringFlag = false;
      return result;
    }
  }

  /** This field is automatically generated by the Language Level Converter. */
  private java.util.LinkedList<ExplicitVisibility> __equalsList = new java.util.LinkedList<ExplicitVisibility>();

  /** This method is automatically generated by the Language Level Converter. */
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    else if ((o == null) || (! o.getClass().equals(getClass()))) {
      return false;
    }
    else {
      boolean alreadyTested = false;
      for (ExplicitVisibility element : __equalsList)
        alreadyTested = alreadyTested || (o == element);

      if (alreadyTested) { 
        return true;
      }
      else {
        ExplicitVisibility cast = ((ExplicitVisibility) o);
        __equalsList.addLast(cast);
        boolean result;
        try {
          result = __valueEquals(i(), cast.i()) && 
              __valueEquals(q(), cast.q());
        }
        catch (RuntimeException e) {
          __equalsList.removeLast();
          throw e;
        }
        __equalsList.removeLast();
        return result;
      }
    }
  }

  /** This field is automatically generated by the Language Level Converter. */
  private static java.util.LinkedList<ExplicitVisibility> __hashCodeList = new java.util.LinkedList<ExplicitVisibility>();

  /** This method is automatically generated by the Language Level Converter. */
  public int hashCode() {
    if (__hashCodeList.contains(this)) {
      return -1;
    }
    else {
      __hashCodeList.addLast(this);
      int result;
      try {
        result = getClass().hashCode() ^ 
            __valueHashCode(i()) ^ 
            __valueHashCode(q());
      }
      catch (RuntimeException e) {
        __hashCodeList.removeLast();
        throw e;
      }
      __hashCodeList.removeLast();
      return result;
    }
  }
}