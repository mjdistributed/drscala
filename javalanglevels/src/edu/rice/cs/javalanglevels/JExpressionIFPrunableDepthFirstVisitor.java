/*BEGIN_COPYRIGHT_BLOCK
 *
 * Copyright (c) 2001-2010, JavaPLT group at Rice University (drjava@rice.edu)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of DrJava, the JavaPLT group, Rice University, nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software is Open Source Initiative approved Open Source Software.
 * Open Source Initative Approved is a trademark of the Open Source Initiative.
 * 
 * This file is part of DrJava.  Download the current version of this project
 * from http://www.drjava.org/ or http://sourceforge.net/projects/drjava/
 * 
 * END_COPYRIGHT_BLOCK*/

package edu.rice.cs.javalanglevels;

import edu.rice.cs.javalanglevels.tree.*;

/** It would be nice if this file could be automatically generated.  Currently,
  * it must be generated by copying any changes to the AST from
  * JExpressionIFDepthFirstVistor_void and pasting them here.  Then the
  * if (prune(that)) ... line must be pasted into each for... method.
  */

/** An abstract implementation of a visitor over JExpressionIF that does not return a value.
  * This visitor implements the visitor interface with methods that 
  * first visit children, and then call visitCASEOnly().
  * (CASE is replaced by the case name.)  After each DOFirst method is called,
  * the method pruneAt(JExpressionIF) is used to determine if the depth-first
  * traversal should be pruned at the specified node.  If not, traversal continues
  * through each of the child nodes, followed by the only method.  If so,
  * control returns immediately to the parent node.  Default implementation of
  * pruneAt always returns true.
  * The default implementation of the forCASEOnly methods call 
  * protected method defaultCase(). This method defaults to no-op.
  */
public class JExpressionIFPrunableDepthFirstVisitor implements JExpressionIFVisitor<Void> {
  /* Methods to visit an item. */
  public Void forJExpressionDoFirst(JExpression that) { return defaultDoFirst(that); }
  public Void forJExpressionOnly(JExpression that) { return defaultCase(that); }
  public Void forSourceFileDoFirst(SourceFile that) { return forJExpressionDoFirst(that); }
  public Void forSourceFileOnly(SourceFile that) { return forJExpressionOnly(that);}
  public Void forModifiersAndVisibilityDoFirst(ModifiersAndVisibility that) { return forJExpressionDoFirst(that); }
  public Void forModifiersAndVisibilityOnly(ModifiersAndVisibility that) { return forJExpressionOnly(that); }
  public Void forCompoundWordDoFirst(CompoundWord that) { return forJExpressionDoFirst(that); }
  public Void forCompoundWordOnly(CompoundWord that) { return forJExpressionOnly(that); }
  public Void forWordDoFirst(Word that) { return forJExpressionDoFirst(that); }
  public Void forWordOnly(Word that) { return forJExpressionOnly(that); }
  public Void forTypeDefBaseDoFirst(TypeDefBase that) { return forJExpressionDoFirst(that); }
  public Void forTypeDefBaseOnly(TypeDefBase that) { return forJExpressionOnly(that); }
  public Void forClassDefDoFirst(ClassDef that) { return forTypeDefBaseDoFirst(that); }
  public Void forClassDefOnly(ClassDef that) { return forTypeDefBaseOnly(that); }
  public Void forInnerClassDefDoFirst(InnerClassDef that) { 
//    System.err.println("JEIFPDFV.forInnerClassDefDoFirst called for " + that.getName());
    return forClassDefDoFirst(that); 
  }
  public Void forInnerClassDefOnly(InnerClassDef that) { return forClassDefOnly(that); }
  public Void forInterfaceDefDoFirst(InterfaceDef that) { return forTypeDefBaseDoFirst(that);  }
  public Void forInterfaceDefOnly(InterfaceDef that) { return forTypeDefBaseOnly(that); }
  public Void forInnerInterfaceDefDoFirst(InnerInterfaceDef that) { return forInterfaceDefDoFirst(that);  }
  public Void forInnerInterfaceDefOnly(InnerInterfaceDef that) { return forInterfaceDefOnly(that); }
  public Void forConstructorDefDoFirst(ConstructorDef that) { return forJExpressionDoFirst(that); }
  public Void forConstructorDefOnly(ConstructorDef that) { return forJExpressionOnly(that); }
  public Void forInitializerDoFirst(Initializer that) { return forJExpressionDoFirst(that); }
  public Void forInitializerOnly(Initializer that) { return forJExpressionOnly(that); }
  public Void forInstanceInitializerDoFirst(InstanceInitializer that) { return forInitializerDoFirst(that); }
  public Void forInstanceInitializerOnly(InstanceInitializer that) { return forInitializerOnly(that); }
  public Void forStaticInitializerDoFirst(StaticInitializer that) { return forInitializerDoFirst(that); }
  public Void forStaticInitializerOnly(StaticInitializer that) { return forInitializerOnly(that); }
  
  public Void forPackageStatementDoFirst(PackageStatement that) { return forJExpressionDoFirst(that); }
  public Void forPackageStatementOnly(PackageStatement that) { return forJExpressionOnly(that); }
  public Void forImportStatementDoFirst(ImportStatement that) { return forJExpressionDoFirst(that); }
  public Void forImportStatementOnly(ImportStatement that) { return forJExpressionOnly(that); }
  public Void forClassImportStatementDoFirst(ClassImportStatement that) { return forImportStatementDoFirst(that); }
  public Void forClassImportStatementOnly(ClassImportStatement that) { return forImportStatementOnly(that); }
  public Void forPackageImportStatementDoFirst(PackageImportStatement that) { return forImportStatementDoFirst(that); }
  public Void forPackageImportStatementOnly(PackageImportStatement that) { return forImportStatementOnly(that); }
  public Void forStatementDoFirst(Statement that) { return forJExpressionDoFirst(that); }
  public Void forStatementOnly(Statement that) { return forJExpressionOnly(that); }
  
  public Void forLabeledStatementDoFirst(LabeledStatement that) { return forStatementDoFirst(that); }
  public Void forLabeledStatementOnly(LabeledStatement that) { return forStatementOnly(that); }
  public Void forBlockDoFirst(Block that) { return forStatementDoFirst(that); }
  
  public Void forBlockOnly(Block that) { return forStatementOnly(that); }
  public Void forExpressionStatementDoFirst(ExpressionStatement that) { return forStatementDoFirst(that); }
  public Void forExpressionStatementOnly(ExpressionStatement that) { return forStatementOnly(that); }
  public Void forSwitchStatementDoFirst(SwitchStatement that) { return forStatementDoFirst(that); }
  public Void forSwitchStatementOnly(SwitchStatement that) { return forStatementOnly(that); }
  public Void forIfThenStatementDoFirst(IfThenStatement that) { return forStatementDoFirst(that); }
  public Void forIfThenStatementOnly(IfThenStatement that) { return forStatementOnly(that); }
  public Void forIfThenElseStatementDoFirst(IfThenElseStatement that) { return forIfThenStatementDoFirst(that); }
  public Void forIfThenElseStatementOnly(IfThenElseStatement that) { return forIfThenStatementOnly(that); }
  public Void forWhileStatementDoFirst(WhileStatement that) { return forStatementDoFirst(that); }
  public Void forWhileStatementOnly(WhileStatement that) { return forStatementOnly(that); }
  public Void forDoStatementDoFirst(DoStatement that) { return forStatementDoFirst(that); }
  public Void forDoStatementOnly(DoStatement that) { return forStatementOnly(that); }
  public Void forForStatementDoFirst(ForStatement that) { return forStatementDoFirst(that); }
  public Void forForStatementOnly(ForStatement that) { return forStatementOnly(that); }
  public Void forBreakStatementDoFirst(BreakStatement that) { return forStatementDoFirst(that); }
  public Void forBreakStatementOnly(BreakStatement that) { return forStatementOnly(that); }
  public Void forLabeledBreakStatementDoFirst(LabeledBreakStatement that) { return forBreakStatementDoFirst(that); }
  public Void forLabeledBreakStatementOnly(LabeledBreakStatement that) { return forBreakStatementOnly(that); }
  public Void forUnlabeledBreakStatementDoFirst(UnlabeledBreakStatement that) { return forBreakStatementDoFirst(that); }
  public Void forUnlabeledBreakStatementOnly(UnlabeledBreakStatement that) { return forBreakStatementOnly(that); }
  public Void forContinueStatementDoFirst(ContinueStatement that) { return forStatementDoFirst(that); }
  public Void forContinueStatementOnly(ContinueStatement that) { return forStatementOnly(that); }
  public Void forLabeledContinueStatementDoFirst(LabeledContinueStatement that) { 
    return forContinueStatementDoFirst(that); 
  }
  public Void forLabeledContinueStatementOnly(LabeledContinueStatement that) { return forContinueStatementOnly(that); }
  public Void forUnlabeledContinueStatementDoFirst(UnlabeledContinueStatement that) { 
    return forContinueStatementDoFirst(that); 
  }
  public Void forUnlabeledContinueStatementOnly(UnlabeledContinueStatement that) { 
    return forContinueStatementOnly(that); 
  }
  public Void forReturnStatementDoFirst(ReturnStatement that) { return forStatementDoFirst(that); }
  public Void forReturnStatementOnly(ReturnStatement that) { return forStatementOnly(that); }
  public Void forVoidReturnStatementDoFirst(VoidReturnStatement that) { return forReturnStatementDoFirst(that); }
  public Void forVoidReturnStatementOnly(VoidReturnStatement that) { return forReturnStatementOnly(that); }
  public Void forValueReturnStatementDoFirst(ValueReturnStatement that) { return forReturnStatementDoFirst(that); }
  public Void forValueReturnStatementOnly(ValueReturnStatement that) { return forReturnStatementOnly(that); }
  public Void forThrowStatementDoFirst(ThrowStatement that) { return forStatementDoFirst(that); }
  public Void forThrowStatementOnly(ThrowStatement that) { return forStatementOnly(that); }
  public Void forSynchronizedStatementDoFirst(SynchronizedStatement that) { return forStatementDoFirst(that); }
  public Void forSynchronizedStatementOnly(SynchronizedStatement that) { return forStatementOnly(that); }
  public Void forTryCatchStatementDoFirst(TryCatchStatement that) { return forStatementDoFirst(that); }
  public Void forTryCatchStatementOnly(TryCatchStatement that) { return forStatementOnly(that); }
  public Void forTryCatchFinallyStatementDoFirst(TryCatchFinallyStatement that) { 
    return forTryCatchStatementDoFirst(that); 
  }
  public Void forTryCatchFinallyStatementOnly(TryCatchFinallyStatement that) { return forTryCatchStatementOnly(that); }
  public Void forNormalTryCatchStatementDoFirst(NormalTryCatchStatement that) { 
    return forTryCatchStatementDoFirst(that);
  }
  public Void forNormalTryCatchStatementOnly(NormalTryCatchStatement that) { return forTryCatchStatementOnly(that); }
  public Void forEmptyStatementDoFirst(EmptyStatement that) { return forStatementDoFirst(that); }
  public Void forEmptyStatementOnly(EmptyStatement that) { return forStatementOnly(that); }
  public Void forMethodDefDoFirst(MethodDef that) { return forJExpressionDoFirst(that); }
  public Void forMethodDefOnly(MethodDef that) { return forJExpressionOnly(that); }
  public Void forConcreteMethodDefDoFirst(ConcreteMethodDef that) { return forMethodDefDoFirst(that); }
  public Void forConcreteMethodDefOnly(ConcreteMethodDef that) { return forMethodDefOnly(that); }
  public Void forAbstractMethodDefDoFirst(AbstractMethodDef that) { return forMethodDefDoFirst(that); }
  public Void forAbstractMethodDefOnly(AbstractMethodDef that) { return forMethodDefOnly(that); }
  public Void forFormalParameterDoFirst(FormalParameter that) { return forJExpressionDoFirst(that); }
  public Void forFormalParameterOnly(FormalParameter that) { return forJExpressionOnly(that); }
  public Void forVariableDeclarationDoFirst(VariableDeclaration that) { return forJExpressionDoFirst(that); }
  public Void forVariableDeclarationOnly(VariableDeclaration that) { return forJExpressionOnly(that); }
  public Void forVariableDeclaratorDoFirst(VariableDeclarator that) { return forJExpressionDoFirst(that); }
  public Void forVariableDeclaratorOnly(VariableDeclarator that) { return forJExpressionOnly(that); }
  public Void forUninitializedVariableDeclaratorDoFirst(UninitializedVariableDeclarator that) { 
    return forVariableDeclaratorDoFirst(that); 
  }
  public Void forUninitializedVariableDeclaratorOnly(UninitializedVariableDeclarator that) { 
    return forVariableDeclaratorOnly(that); 
  }
  public Void forInitializedVariableDeclaratorDoFirst(InitializedVariableDeclarator that) { 
    return forVariableDeclaratorDoFirst(that); 
  }
  public Void forInitializedVariableDeclaratorOnly(InitializedVariableDeclarator that) { 
    return forVariableDeclaratorOnly(that); 
  }
  public Void forTypeParameterDoFirst(TypeParameter that) { return forJExpressionDoFirst(that); }
  public Void forTypeParameterOnly(TypeParameter that) { return forJExpressionOnly(that); }
  public Void forArrayInitializerDoFirst(ArrayInitializer that) { return forJExpressionDoFirst(that); }
  public Void forArrayInitializerOnly(ArrayInitializer that) { return forJExpressionOnly(that); }
  public Void forTypeDoFirst(Type that) { return forJExpressionDoFirst(that); }
  public Void forTypeOnly(Type that) { return forJExpressionOnly(that); }
  public Void forPrimitiveTypeDoFirst(PrimitiveType that) { return forTypeDoFirst(that); }
  public Void forPrimitiveTypeOnly(PrimitiveType that) { return forTypeOnly(that); }
  public Void forArrayTypeDoFirst(ArrayType that) { return forTypeDoFirst(that); }
  public Void forArrayTypeOnly(ArrayType that) { return forTypeOnly(that); }
  public Void forReferenceTypeDoFirst(ReferenceType that) { return forTypeDoFirst(that); }
  public Void forReferenceTypeOnly(ReferenceType that) { return forTypeOnly(that); }
  public Void forMemberTypeDoFirst(MemberType that) { return forReferenceTypeDoFirst(that); }
  public Void forMemberTypeOnly(MemberType that) { return forReferenceTypeOnly(that); }
  public Void forClassOrInterfaceTypeDoFirst(ClassOrInterfaceType that) { return forReferenceTypeDoFirst(that); }
  public Void forClassOrInterfaceTypeOnly(ClassOrInterfaceType that) { return forReferenceTypeOnly(that); }
  public Void forTypeVariableDoFirst(TypeVariable that) { return forReferenceTypeDoFirst(that); }
  public Void forTypeVariableOnly(TypeVariable that) { return forReferenceTypeOnly(that); }
  public Void forVoidReturnDoFirst(VoidReturn that) { return forJExpressionDoFirst(that); }
  public Void forVoidReturnOnly(VoidReturn that) { return forJExpressionOnly(that); }
  public Void forSwitchCaseDoFirst(SwitchCase that) { return forJExpressionDoFirst(that); }
  public Void forSwitchCaseOnly(SwitchCase that) { return forJExpressionOnly(that); }
  public Void forLabeledCaseDoFirst(LabeledCase that) { return forSwitchCaseDoFirst(that); }
  public Void forLabeledCaseOnly(LabeledCase that) { return forSwitchCaseOnly(that); }
  public Void forDefaultCaseDoFirst(DefaultCase that) { return forSwitchCaseDoFirst(that); }
  public Void forDefaultCaseOnly(DefaultCase that) { return forSwitchCaseOnly(that); }
  public Void forCatchBlockDoFirst(CatchBlock that) { return forJExpressionDoFirst(that); }
  public Void forCatchBlockOnly(CatchBlock that) { return forJExpressionOnly(that); }
  public Void forExpressionDoFirst(Expression that) { return forJExpressionDoFirst(that); }
  public Void forExpressionOnly(Expression that) { return forJExpressionOnly(that); }
  public Void forAssignmentExpressionDoFirst(AssignmentExpression that) { return forExpressionDoFirst(that); }
  public Void forAssignmentExpressionOnly(AssignmentExpression that) { return forExpressionOnly(that); }
  public Void forSimpleAssignmentExpressionDoFirst(SimpleAssignmentExpression that) { 
    return forAssignmentExpressionDoFirst(that); 
  }
  public Void forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that) { 
    return forAssignmentExpressionOnly(that); 
  }
  public Void forPlusAssignmentExpressionDoFirst(PlusAssignmentExpression that) { 
    return forAssignmentExpressionDoFirst(that); 
  }
  public Void forPlusAssignmentExpressionOnly(PlusAssignmentExpression that) { 
    return forAssignmentExpressionOnly(that); 
  }
  public Void forNumericAssignmentExpressionDoFirst(NumericAssignmentExpression that) { 
    return forAssignmentExpressionDoFirst(that); 
  }
  public Void forNumericAssignmentExpressionOnly(NumericAssignmentExpression that) { 
    return forAssignmentExpressionOnly(that); 
  }
  public Void forMinusAssignmentExpressionDoFirst(MinusAssignmentExpression that) { 
    return forNumericAssignmentExpressionDoFirst(that); 
  }
  public Void forMinusAssignmentExpressionOnly(MinusAssignmentExpression that) { 
    return forNumericAssignmentExpressionOnly(that); 
  }
  public Void forMultiplyAssignmentExpressionDoFirst(MultiplyAssignmentExpression that) { 
    return forNumericAssignmentExpressionDoFirst(that); 
  }
  public Void forMultiplyAssignmentExpressionOnly(MultiplyAssignmentExpression that) { 
    return forNumericAssignmentExpressionOnly(that); 
  }
  public Void forDivideAssignmentExpressionDoFirst(DivideAssignmentExpression that) { 
    return forNumericAssignmentExpressionDoFirst(that); 
  }
  public Void forDivideAssignmentExpressionOnly(DivideAssignmentExpression that) { 
    return forNumericAssignmentExpressionOnly(that); 
  }
  public Void forModAssignmentExpressionDoFirst(ModAssignmentExpression that) { 
    return forNumericAssignmentExpressionDoFirst(that); 
  }
  public Void forModAssignmentExpressionOnly(ModAssignmentExpression that) { 
    return forNumericAssignmentExpressionOnly(that);
  }
  public Void forShiftAssignmentExpressionDoFirst(ShiftAssignmentExpression that) { 
    return forAssignmentExpressionDoFirst(that);
  }
  public Void forShiftAssignmentExpressionOnly(ShiftAssignmentExpression that) { 
    return forAssignmentExpressionOnly(that);
  }
  public Void forLeftShiftAssignmentExpressionDoFirst(LeftShiftAssignmentExpression that) { 
    return forShiftAssignmentExpressionDoFirst(that);
  }
  public Void forLeftShiftAssignmentExpressionOnly(LeftShiftAssignmentExpression that) { 
    return forShiftAssignmentExpressionOnly(that); 
  }
  public Void forRightSignedShiftAssignmentExpressionDoFirst(RightSignedShiftAssignmentExpression that) { 
    return forShiftAssignmentExpressionDoFirst(that); 
  }
  public Void forRightSignedShiftAssignmentExpressionOnly(RightSignedShiftAssignmentExpression that) { 
    return forShiftAssignmentExpressionOnly(that); 
  }
  public Void forRightUnsignedShiftAssignmentExpressionDoFirst(RightUnsignedShiftAssignmentExpression that) { 
    return forShiftAssignmentExpressionDoFirst(that); 
  }
  public Void forRightUnsignedShiftAssignmentExpressionOnly(RightUnsignedShiftAssignmentExpression that) { 
    return forShiftAssignmentExpressionOnly(that); 
  }
  public Void forBitwiseAssignmentExpressionDoFirst(BitwiseAssignmentExpression that) { 
    return forAssignmentExpressionDoFirst(that);
  }
  public Void forBitwiseAssignmentExpressionOnly(BitwiseAssignmentExpression that) { 
    return forAssignmentExpressionOnly(that);
  }
  public Void forBitwiseAndAssignmentExpressionDoFirst(BitwiseAndAssignmentExpression that) { 
    return forBitwiseAssignmentExpressionDoFirst(that); 
  }
  public Void forBitwiseAndAssignmentExpressionOnly(BitwiseAndAssignmentExpression that) { 
    return forBitwiseAssignmentExpressionOnly(that);
  }
  public Void forBitwiseOrAssignmentExpressionDoFirst(BitwiseOrAssignmentExpression that) { 
    return forBitwiseAssignmentExpressionDoFirst(that);
  }
  public Void forBitwiseOrAssignmentExpressionOnly(BitwiseOrAssignmentExpression that) { 
    return forBitwiseAssignmentExpressionOnly(that); 
  }
  public Void forBitwiseXorAssignmentExpressionDoFirst(BitwiseXorAssignmentExpression that) { 
    return forBitwiseAssignmentExpressionDoFirst(that);
  }
  public Void forBitwiseXorAssignmentExpressionOnly(BitwiseXorAssignmentExpression that) { 
    return forBitwiseAssignmentExpressionOnly(that);
  }
  public Void forBinaryExpressionDoFirst(BinaryExpression that) { return forExpressionDoFirst(that); }
  public Void forBinaryExpressionOnly(BinaryExpression that) { return forExpressionOnly(that); }
  public Void forBooleanExpressionDoFirst(BooleanExpression that) { return forBinaryExpressionDoFirst(that); }
  public Void forBooleanExpressionOnly(BooleanExpression that) { return forBinaryExpressionOnly(that); }
  public Void forOrExpressionDoFirst(OrExpression that) { return forBooleanExpressionDoFirst(that); }
  public Void forOrExpressionOnly(OrExpression that) { return forBooleanExpressionOnly(that); }
  public Void forAndExpressionDoFirst(AndExpression that) { return forBooleanExpressionDoFirst(that); }
  public Void forAndExpressionOnly(AndExpression that) { return forBooleanExpressionOnly(that); }
  public Void forBitwiseBinaryExpressionDoFirst(BitwiseBinaryExpression that) { 
    return forBinaryExpressionDoFirst(that); 
  }
  public Void forBitwiseBinaryExpressionOnly(BitwiseBinaryExpression that) { return forBinaryExpressionOnly(that); }
  public Void forBitwiseOrExpressionDoFirst(BitwiseOrExpression that) { 
    return forBitwiseBinaryExpressionDoFirst(that); 
  }
  public Void forBitwiseOrExpressionOnly(BitwiseOrExpression that) { return forBitwiseBinaryExpressionOnly(that); }
  public Void forBitwiseXorExpressionDoFirst(BitwiseXorExpression that) { 
    return forBitwiseBinaryExpressionDoFirst(that); 
  }
  public Void forBitwiseXorExpressionOnly(BitwiseXorExpression that) { return forBitwiseBinaryExpressionOnly(that); }
  public Void forBitwiseAndExpressionDoFirst(BitwiseAndExpression that) { 
    return forBitwiseBinaryExpressionDoFirst(that); 
  }
  public Void forBitwiseAndExpressionOnly(BitwiseAndExpression that) { return forBitwiseBinaryExpressionOnly(that); }
  public Void forEqualityExpressionDoFirst(EqualityExpression that) { return forBinaryExpressionDoFirst(that); }
  public Void forEqualityExpressionOnly(EqualityExpression that) { return forBinaryExpressionOnly(that); }
  public Void forEqualsExpressionDoFirst(EqualsExpression that) { return forEqualityExpressionDoFirst(that); }
  public Void forEqualsExpressionOnly(EqualsExpression that) { return forEqualityExpressionOnly(that); }
  public Void forNotEqualExpressionDoFirst(NotEqualExpression that) { return forEqualityExpressionDoFirst(that); }
  public Void forNotEqualExpressionOnly(NotEqualExpression that) { return forEqualityExpressionOnly(that); }
  public Void forComparisonExpressionDoFirst(ComparisonExpression that) { return forBinaryExpressionDoFirst(that); }
  public Void forComparisonExpressionOnly(ComparisonExpression that) { return forBinaryExpressionOnly(that); }
  public Void forLessThanExpressionDoFirst(LessThanExpression that) { return forComparisonExpressionDoFirst(that); }
  public Void forLessThanExpressionOnly(LessThanExpression that) { return forComparisonExpressionOnly(that); }
  public Void forLessThanOrEqualExpressionDoFirst(LessThanOrEqualExpression that) { 
    return forComparisonExpressionDoFirst(that);
  }
  public Void forLessThanOrEqualExpressionOnly(LessThanOrEqualExpression that) { 
    return forComparisonExpressionOnly(that); 
  }
  public Void forGreaterThanExpressionDoFirst(GreaterThanExpression that) { 
    return forComparisonExpressionDoFirst(that); 
  }
  public Void forGreaterThanExpressionOnly(GreaterThanExpression that) { return forComparisonExpressionOnly(that); }
  public Void forGreaterThanOrEqualExpressionDoFirst(GreaterThanOrEqualExpression that) { 
    return forComparisonExpressionDoFirst(that); 
  }
  public Void forGreaterThanOrEqualExpressionOnly(GreaterThanOrEqualExpression that) { 
    return forComparisonExpressionOnly(that);
  }
  public Void forShiftBinaryExpressionDoFirst(ShiftBinaryExpression that) { return forBinaryExpressionDoFirst(that); }
  public Void forShiftBinaryExpressionOnly(ShiftBinaryExpression that) { return forBinaryExpressionOnly(that); }
  public Void forLeftShiftExpressionDoFirst(LeftShiftExpression that) { return forShiftBinaryExpressionDoFirst(that); }
  public Void forLeftShiftExpressionOnly(LeftShiftExpression that) { return forShiftBinaryExpressionOnly(that); }
  public Void forRightSignedShiftExpressionDoFirst(RightSignedShiftExpression that) { 
    return forShiftBinaryExpressionDoFirst(that); 
  }
  public Void forRightSignedShiftExpressionOnly(RightSignedShiftExpression that) { 
    return forShiftBinaryExpressionOnly(that); 
  }
  public Void forRightUnsignedShiftExpressionDoFirst(RightUnsignedShiftExpression that) { 
    return forShiftBinaryExpressionDoFirst(that);
  }
  public Void forRightUnsignedShiftExpressionOnly(RightUnsignedShiftExpression that) { 
    return forShiftBinaryExpressionOnly(that);
  }
  public Void forPlusExpressionDoFirst(PlusExpression that) { return forBinaryExpressionDoFirst(that); }
  public Void forPlusExpressionOnly(PlusExpression that) { return forBinaryExpressionOnly(that); }
  public Void forNumericBinaryExpressionDoFirst(NumericBinaryExpression that) { 
    return forBinaryExpressionDoFirst(that);
  }
  public Void forNumericBinaryExpressionOnly(NumericBinaryExpression that) { return forBinaryExpressionOnly(that); }
  public Void forMinusExpressionDoFirst(MinusExpression that) { return forNumericBinaryExpressionDoFirst(that); }
  public Void forMinusExpressionOnly(MinusExpression that) { return forNumericBinaryExpressionOnly(that); }
  public Void forMultiplyExpressionDoFirst(MultiplyExpression that) { return forNumericBinaryExpressionDoFirst(that); }
  public Void forMultiplyExpressionOnly(MultiplyExpression that) { return forNumericBinaryExpressionOnly(that); }
  public Void forDivideExpressionDoFirst(DivideExpression that) { return forNumericBinaryExpressionDoFirst(that); }
  public Void forDivideExpressionOnly(DivideExpression that) { return forNumericBinaryExpressionOnly(that); }
  public Void forModExpressionDoFirst(ModExpression that) { return forNumericBinaryExpressionDoFirst(that); }
  public Void forModExpressionOnly(ModExpression that) { return forNumericBinaryExpressionOnly(that); }
  public Void forNoOpExpressionDoFirst(NoOpExpression that) { return forBinaryExpressionDoFirst(that); }
  public Void forNoOpExpressionOnly(NoOpExpression that) { return forBinaryExpressionOnly(that); }
  public Void forUnaryExpressionDoFirst(UnaryExpression that) { return forExpressionDoFirst(that); }
  public Void forUnaryExpressionOnly(UnaryExpression that) { return forExpressionOnly(that); }
  public Void forIncrementExpressionDoFirst(IncrementExpression that) { return forUnaryExpressionDoFirst(that); }
  public Void forIncrementExpressionOnly(IncrementExpression that) { return forUnaryExpressionOnly(that); }
  public Void forPrefixIncrementExpressionDoFirst(PrefixIncrementExpression that) { 
    return forIncrementExpressionDoFirst(that);
  }
  public Void forPrefixIncrementExpressionOnly(PrefixIncrementExpression that) { 
    return forIncrementExpressionOnly(that);
  }
  public Void forPositivePrefixIncrementExpressionDoFirst(PositivePrefixIncrementExpression that) { 
    return forPrefixIncrementExpressionDoFirst(that);
  }
  public Void forPositivePrefixIncrementExpressionOnly(PositivePrefixIncrementExpression that) { 
    return forPrefixIncrementExpressionOnly(that); 
  }
  public Void forNegativePrefixIncrementExpressionDoFirst(NegativePrefixIncrementExpression that) { 
    return forPrefixIncrementExpressionDoFirst(that);
  }
  public Void forNegativePrefixIncrementExpressionOnly(NegativePrefixIncrementExpression that) { 
    return forPrefixIncrementExpressionOnly(that); 
  }
  public Void forPostfixIncrementExpressionDoFirst(PostfixIncrementExpression that) { 
    return forIncrementExpressionDoFirst(that);
  }
  public Void forPostfixIncrementExpressionOnly(PostfixIncrementExpression that) { 
    return forIncrementExpressionOnly(that);
  }
  public Void forPositivePostfixIncrementExpressionDoFirst(PositivePostfixIncrementExpression that) { 
    return forPostfixIncrementExpressionDoFirst(that); 
  }
  public Void forPositivePostfixIncrementExpressionOnly(PositivePostfixIncrementExpression that) { 
    return forPostfixIncrementExpressionOnly(that);
  }
  public Void forNegativePostfixIncrementExpressionDoFirst(NegativePostfixIncrementExpression that) { 
    return forPostfixIncrementExpressionDoFirst(that); 
  }
  public Void forNegativePostfixIncrementExpressionOnly(NegativePostfixIncrementExpression that) { 
    return forPostfixIncrementExpressionOnly(that); 
  }
  public Void forNumericUnaryExpressionDoFirst(NumericUnaryExpression that) { return forUnaryExpressionDoFirst(that); }
  public Void forNumericUnaryExpressionOnly(NumericUnaryExpression that) { return forUnaryExpressionOnly(that); }
  public Void forPositiveExpressionDoFirst(PositiveExpression that) { return forNumericUnaryExpressionDoFirst(that); }
  public Void forPositiveExpressionOnly(PositiveExpression that) { return forNumericUnaryExpressionOnly(that); }
  public Void forNegativeExpressionDoFirst(NegativeExpression that) { return forNumericUnaryExpressionDoFirst(that); }
  public Void forNegativeExpressionOnly(NegativeExpression that) { return forNumericUnaryExpressionOnly(that); }
  public Void forBitwiseNotExpressionDoFirst(BitwiseNotExpression that) { return forUnaryExpressionDoFirst(that); }
  public Void forBitwiseNotExpressionOnly(BitwiseNotExpression that) { return forUnaryExpressionOnly(that); }
  public Void forNotExpressionDoFirst(NotExpression that) { return forUnaryExpressionDoFirst(that); }
  public Void forNotExpressionOnly(NotExpression that) { return forUnaryExpressionOnly(that); }
  public Void forConditionalExpressionDoFirst(ConditionalExpression that) { return forExpressionDoFirst(that); }
  public Void forConditionalExpressionOnly(ConditionalExpression that) { return forExpressionOnly(that); }
  public Void forInstanceofExpressionDoFirst(InstanceofExpression that) { return forExpressionDoFirst(that); }
  public Void forInstanceofExpressionOnly(InstanceofExpression that) { return forExpressionOnly(that); }
  public Void forCastExpressionDoFirst(CastExpression that) { return forExpressionDoFirst(that); }
  public Void forCastExpressionOnly(CastExpression that) { return forExpressionOnly(that); }
  public Void forPrimaryDoFirst(Primary that) { return forExpressionDoFirst(that); }
  public Void forPrimaryOnly(Primary that) { return forExpressionOnly(that); }
  public Void forLexicalLiteralDoFirst(LexicalLiteral that) { return forPrimaryDoFirst(that); }
  public Void forLexicalLiteralOnly(LexicalLiteral that) { return forPrimaryOnly(that); }
  public Void forIntegerLiteralDoFirst(IntegerLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forIntegerLiteralOnly(IntegerLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forLongLiteralDoFirst(LongLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forLongLiteralOnly(LongLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forDoubleLiteralDoFirst(DoubleLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forDoubleLiteralOnly(DoubleLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forFloatLiteralDoFirst(FloatLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forFloatLiteralOnly(FloatLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forBooleanLiteralDoFirst(BooleanLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forBooleanLiteralOnly(BooleanLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forCharLiteralDoFirst(CharLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forCharLiteralOnly(CharLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forStringLiteralDoFirst(StringLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forStringLiteralOnly(StringLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forNullLiteralDoFirst(NullLiteral that) { return forLexicalLiteralDoFirst(that); }
  public Void forNullLiteralOnly(NullLiteral that) { return forLexicalLiteralOnly(that); }
  public Void forInstantiationDoFirst(Instantiation that) { return forPrimaryDoFirst(that); }
  public Void forInstantiationOnly(Instantiation that) { return forPrimaryOnly(that); }
  public Void forClassInstantiationDoFirst(ClassInstantiation that) { return forInstantiationDoFirst(that); }
  public Void forClassInstantiationOnly(ClassInstantiation that) { return forInstantiationOnly(that); }
  public Void forNamedClassInstantiationDoFirst(NamedClassInstantiation that) { 
    return forClassInstantiationDoFirst(that); 
  }
  public Void forNamedClassInstantiationOnly(NamedClassInstantiation that) { return forClassInstantiationOnly(that); }
  public Void forSimpleNamedClassInstantiationDoFirst(SimpleNamedClassInstantiation that) { 
    return forNamedClassInstantiationDoFirst(that); 
  }
  public Void forSimpleNamedClassInstantiationOnly(SimpleNamedClassInstantiation that) { 
    return forNamedClassInstantiationOnly(that);
  }
  public Void forComplexNamedClassInstantiationDoFirst(ComplexNamedClassInstantiation that) { 
    return forNamedClassInstantiationDoFirst(that); 
  }
  public Void forComplexNamedClassInstantiationOnly(ComplexNamedClassInstantiation that) { 
    return forNamedClassInstantiationOnly(that); 
  }
  public Void forAnonymousClassInstantiationDoFirst(AnonymousClassInstantiation that) { 
    return forClassInstantiationDoFirst(that); 
  }
  public Void forAnonymousClassInstantiationOnly(AnonymousClassInstantiation that) { 
    return forClassInstantiationOnly(that); 
  }
  public Void forSimpleAnonymousClassInstantiationDoFirst(SimpleAnonymousClassInstantiation that) { 
    return forAnonymousClassInstantiationDoFirst(that); 
  }
  public Void forSimpleAnonymousClassInstantiationOnly(SimpleAnonymousClassInstantiation that) { 
    return forAnonymousClassInstantiationOnly(that); 
  }
  public Void forComplexAnonymousClassInstantiationDoFirst(ComplexAnonymousClassInstantiation that) { 
    return forAnonymousClassInstantiationDoFirst(that);
  }
  public Void forComplexAnonymousClassInstantiationOnly(ComplexAnonymousClassInstantiation that) { 
    return forAnonymousClassInstantiationOnly(that); 
  }
  public Void forArrayInstantiationDoFirst(ArrayInstantiation that) { return forInstantiationDoFirst(that); }
  public Void forArrayInstantiationOnly(ArrayInstantiation that) { return forInstantiationOnly(that); }
  public Void forUninitializedArrayInstantiationDoFirst(UninitializedArrayInstantiation that) { 
    return forArrayInstantiationDoFirst(that); 
  }
  public Void forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that) { 
    return forArrayInstantiationOnly(that); 
  }
  public Void forSimpleUninitializedArrayInstantiationDoFirst(SimpleUninitializedArrayInstantiation that) { 
    return forUninitializedArrayInstantiationDoFirst(that);
  }
  public Void forSimpleUninitializedArrayInstantiationOnly(SimpleUninitializedArrayInstantiation that) { 
    return forUninitializedArrayInstantiationOnly(that);
  }
  public Void forComplexUninitializedArrayInstantiationDoFirst(ComplexUninitializedArrayInstantiation that) { 
    return forUninitializedArrayInstantiationDoFirst(that);
  }
  public Void forComplexUninitializedArrayInstantiationOnly(ComplexUninitializedArrayInstantiation that) { 
    return forUninitializedArrayInstantiationOnly(that); 
  }
  public Void forInitializedArrayInstantiationDoFirst(InitializedArrayInstantiation that) { 
    return forArrayInstantiationDoFirst(that); 
  }
  public Void forInitializedArrayInstantiationOnly(InitializedArrayInstantiation that) { 
    return forArrayInstantiationOnly(that);
  }
  public Void forSimpleInitializedArrayInstantiationDoFirst(SimpleInitializedArrayInstantiation that) { 
    return forInitializedArrayInstantiationDoFirst(that);
  }
  public Void forSimpleInitializedArrayInstantiationOnly(SimpleInitializedArrayInstantiation that) { 
    return forInitializedArrayInstantiationOnly(that);
  }
  public Void forComplexInitializedArrayInstantiationDoFirst(ComplexInitializedArrayInstantiation that) { 
    return forInitializedArrayInstantiationDoFirst(that);
  }
  public Void forComplexInitializedArrayInstantiationOnly(ComplexInitializedArrayInstantiation that) { 
    return forInitializedArrayInstantiationOnly(that);
  }
  public Void forVariableReferenceDoFirst(VariableReference that) { return forPrimaryDoFirst(that); }
  public Void forVariableReferenceOnly(VariableReference that) { return forPrimaryOnly(that); }
  public Void forNameReferenceDoFirst(NameReference that) { return forVariableReferenceDoFirst(that); }
  public Void forNameReferenceOnly(NameReference that) { return forVariableReferenceOnly(that); }
  public Void forSimpleNameReferenceDoFirst(SimpleNameReference that) { return forNameReferenceDoFirst(that); }
  public Void forSimpleNameReferenceOnly(SimpleNameReference that) { return forNameReferenceOnly(that); }
  public Void forComplexNameReferenceDoFirst(ComplexNameReference that) { return forNameReferenceDoFirst(that); }
  public Void forComplexNameReferenceOnly(ComplexNameReference that) { return forNameReferenceOnly(that); }
  public Void forThisReferenceDoFirst(ThisReference that) { return forVariableReferenceDoFirst(that); }
  public Void forThisReferenceOnly(ThisReference that) { return forVariableReferenceOnly(that); }
  public Void forSimpleThisReferenceDoFirst(SimpleThisReference that) { return forThisReferenceDoFirst(that); }
  public Void forSimpleThisReferenceOnly(SimpleThisReference that) { return forThisReferenceOnly(that); }
  public Void forComplexThisReferenceDoFirst(ComplexThisReference that) { return forThisReferenceDoFirst(that); }
  public Void forComplexThisReferenceOnly(ComplexThisReference that) { return forThisReferenceOnly(that); }
  public Void forSuperReferenceDoFirst(SuperReference that) { return forVariableReferenceDoFirst(that); }
  public Void forSuperReferenceOnly(SuperReference that) { return forVariableReferenceOnly(that); }
  public Void forSimpleSuperReferenceDoFirst(SimpleSuperReference that) { return forSuperReferenceDoFirst(that); }
  public Void forSimpleSuperReferenceOnly(SimpleSuperReference that) { return forSuperReferenceOnly(that); }
  public Void forComplexSuperReferenceDoFirst(ComplexSuperReference that) { return forSuperReferenceDoFirst(that); }
  public Void forComplexSuperReferenceOnly(ComplexSuperReference that) { return forSuperReferenceOnly(that); }
  public Void forFunctionInvocationDoFirst(FunctionInvocation that) { return forPrimaryDoFirst(that); }
  public Void forFunctionInvocationOnly(FunctionInvocation that) { return forPrimaryOnly(that); }
  public Void forMethodInvocationDoFirst(MethodInvocation that) { return forFunctionInvocationDoFirst(that); }
  public Void forMethodInvocationOnly(MethodInvocation that) { return forFunctionInvocationOnly(that); }
  public Void forSimpleMethodInvocationDoFirst(SimpleMethodInvocation that) { return forMethodInvocationDoFirst(that); }
  public Void forSimpleMethodInvocationOnly(SimpleMethodInvocation that) { return forMethodInvocationOnly(that); }
  public Void forComplexMethodInvocationDoFirst(ComplexMethodInvocation that) { 
    return forMethodInvocationDoFirst(that); 
  }
  public Void forComplexMethodInvocationOnly(ComplexMethodInvocation that) { return forMethodInvocationOnly(that); }
  public Void forThisConstructorInvocationDoFirst(ThisConstructorInvocation that) { 
    return forFunctionInvocationDoFirst(that); 
  }
  public Void forThisConstructorInvocationOnly(ThisConstructorInvocation that) { 
    return forFunctionInvocationOnly(that);
  }
  public Void forSimpleThisConstructorInvocationDoFirst(SimpleThisConstructorInvocation that) { 
    return forThisConstructorInvocationDoFirst(that); 
  }
  public Void forSimpleThisConstructorInvocationOnly(SimpleThisConstructorInvocation that) { 
    return forThisConstructorInvocationOnly(that); 
  }
  public Void forComplexThisConstructorInvocationDoFirst(ComplexThisConstructorInvocation that) { 
    return forThisConstructorInvocationDoFirst(that); 
  }
  public Void forComplexThisConstructorInvocationOnly(ComplexThisConstructorInvocation that) { 
    return forThisConstructorInvocationOnly(that); 
  }
  public Void forSuperConstructorInvocationDoFirst(SuperConstructorInvocation that) { 
    return forFunctionInvocationDoFirst(that); 
  }
  public Void forSuperConstructorInvocationOnly(SuperConstructorInvocation that) { 
    return forFunctionInvocationOnly(that); 
  }
  public Void forSimpleSuperConstructorInvocationDoFirst(SimpleSuperConstructorInvocation that) { 
    return forSuperConstructorInvocationDoFirst(that);
  }
  public Void forSimpleSuperConstructorInvocationOnly(SimpleSuperConstructorInvocation that) { 
    return forSuperConstructorInvocationOnly(that);
  }
  public Void forComplexSuperConstructorInvocationDoFirst(ComplexSuperConstructorInvocation that) { 
    return forSuperConstructorInvocationDoFirst(that); 
  }
  public Void forComplexSuperConstructorInvocationOnly(ComplexSuperConstructorInvocation that) { 
    return forSuperConstructorInvocationOnly(that); 
  }
  public Void forClassLiteralDoFirst(ClassLiteral that) { return forPrimaryDoFirst(that); }
  public Void forClassLiteralOnly(ClassLiteral that) { return forPrimaryOnly(that); }
  public Void forArrayAccessDoFirst(ArrayAccess that) { return forPrimaryDoFirst(that); }
  public Void forArrayAccessOnly(ArrayAccess that) { return forPrimaryOnly(that); }
  public Void forParenthesizedDoFirst(Parenthesized that) { return forPrimaryDoFirst(that); }
  public Void forParenthesizedOnly(Parenthesized that) { return forPrimaryOnly(that); }
  public Void forEmptyExpressionDoFirst(EmptyExpression that) { return forPrimaryDoFirst(that); }
  public Void forEmptyExpressionOnly(EmptyExpression that) { return forPrimaryOnly(that); }
//  public void forEmptyDimensionExpressionDoFirst(EmptyDimensionExpression that) {
//    forPrimaryDoFirst(that);
//  }
  
//  public void forEmptyDimensionExpressionOnly(EmptyDimensionExpression that) {
//    forPrimaryOnly(that);
//  }
  
  public Void forBodyDoFirst(Body that) { return forJExpressionDoFirst(that); }
  public Void forBodyOnly(Body that) { return forJExpressionOnly(that); }
  public Void forBracedBodyDoFirst(BracedBody that) { return forBodyDoFirst(that); }
  public Void forBracedBodyOnly(BracedBody that) { return forBodyOnly(that); }
  public Void forUnbracedBodyDoFirst(UnbracedBody that) { return forBodyDoFirst(that); }
  public Void forUnbracedBodyOnly(UnbracedBody that) { return forBodyOnly(that); }
  public Void forExpressionListDoFirst(ExpressionList that) { return forJExpressionDoFirst(that); }
  public Void forExpressionListOnly(ExpressionList that) { return forJExpressionOnly(that); }
  public Void forParenthesizedExpressionListDoFirst(ParenthesizedExpressionList that) { 
    return forExpressionListDoFirst(that); 
  }
  public Void forParenthesizedExpressionListOnly(ParenthesizedExpressionList that) { 
    return forExpressionListOnly(that); 
  }
  public Void forUnparenthesizedExpressionListDoFirst(UnparenthesizedExpressionList that) { 
    return forExpressionListDoFirst(that);
  }
  public Void forUnparenthesizedExpressionListOnly(UnparenthesizedExpressionList that) { 
    return forExpressionListOnly(that);
  }
  public Void forDimensionExpressionListDoFirst(DimensionExpressionList that) { return forExpressionListDoFirst(that); }
  public Void forDimensionExpressionListOnly(DimensionExpressionList that) { return forExpressionListOnly(that); }
  public Void forEmptyForConditionDoFirst(EmptyForCondition that) { return forJExpressionDoFirst(that); }
  public Void forEmptyForConditionOnly(EmptyForCondition that) { return forJExpressionOnly(that); }
  
  /* Implementation of JExpressionIFVisitor_void methods to implement depth-first traversal. */
  public Void forSourceFile(SourceFile that) { 
    forSourceFileDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getPackageStatements().length; i++) that.getPackageStatements()[i].visit(this);
    for (int i = 0; i < that.getImportStatements().length; i++) that.getImportStatements()[i].visit(this);
    for (int i = 0; i < that.getTypes().length; i++) that.getTypes()[i].visit(this);
    return forSourceFileOnly(that);
  }
  public Void forModifiersAndVisibility(ModifiersAndVisibility that) { 
    forModifiersAndVisibilityDoFirst(that);
    if (prune(that)) return null;
    return forModifiersAndVisibilityOnly(that);
  }
  public Void forCompoundWord(CompoundWord that) { 
    forCompoundWordDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getWords().length; i++) that.getWords()[i].visit(this);
    return forCompoundWordOnly(that);
  }
  public Void forWord(Word that) { 
    forWordDoFirst(that);
    if (prune(that)) return null;
    return forWordOnly(that);
  }
  
  public Void forClassDef(ClassDef that) { 
    forClassDefDoFirst(that);
    if (prune(that)) return null;    
    that.getMav().visit(this);
    that.getName().visit(this);
    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);
    
    that.getSuperclass().visit(this);
    
    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);
    
    that.getBody().visit(this); 
    return forClassDefOnly(that);
  }
  
  public Void forInnerClassDef(InnerClassDef that) {
//    System.err.println("Visiting inner class " + that.getName() + " in JExpIfPrunDFV from " + this);
    forInnerClassDefDoFirst(that);
    if (prune(that)) return null;
//    System.err.println("Passed the prune control point in JEIFPDFV.forInnerClassDef for " + that.getName());
    that.getMav().visit(this);
    that.getName().visit(this);
    
    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);
    that.getSuperclass().visit(this);
    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);
    
    that.getBody().visit(this); 
    return forInnerClassDefOnly(that); 
  }  
  
  public Void forInterfaceDef(InterfaceDef that) { 
    forInterfaceDefDoFirst(that);
    if (prune(that)) return null;
    that.getMav().visit(this);
    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);
    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);
    that.getBody().visit(this); 
    return forInterfaceDefOnly(that);
  }
  public Void forInnerInterfaceDef(InnerInterfaceDef that) { 
    forInnerInterfaceDefDoFirst(that);
    if (prune(that)) return null;
    that.getMav().visit(this);
    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);
    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);
    that.getBody().visit(this); 
    return forInnerInterfaceDefOnly(that);
  }
  public Void forConstructorDef(ConstructorDef that) { 
    forConstructorDefDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getMav().visit(this);
    for (int i = 0; i < that.getParameters().length; i++) that.getParameters()[i].visit(this);
    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);
    that.getStatements().visit(this);
    return forConstructorDefOnly(that);
  }
  public Void forInstanceInitializer(InstanceInitializer that) { 
    forInstanceInitializerDoFirst(that);
    if (prune(that)) return null;
    that.getCode().visit(this);
    return forInstanceInitializerOnly(that);
  }
  public Void forStaticInitializer(StaticInitializer that) { 
    forStaticInitializerDoFirst(that);
    if (prune(that)) return null;
    that.getCode().visit(this);
    return forStaticInitializerOnly(that);
  }
  public Void forPackageStatement(PackageStatement that) { 
    forPackageStatementDoFirst(that);
    if (prune(that)) return null;
    that.getCWord().visit(this);
    return forPackageStatementOnly(that);
  }
  public Void forClassImportStatement(ClassImportStatement that) {
    forClassImportStatementDoFirst(that);
    if (prune(that)) return null;
    that.getCWord().visit(this);
    return forClassImportStatementOnly(that);
  }
  public Void forPackageImportStatement(PackageImportStatement that) {
    forPackageImportStatementDoFirst(that);
    if (prune(that)) return null;
    that.getCWord().visit(this);
    return forPackageImportStatementOnly(that);
  }
  public Void forLabeledStatement(LabeledStatement that) { 
    forLabeledStatementDoFirst(that);
    if (prune(that)) return null;
    that.getLabel().visit(this);
    that.getStatement().visit(this);
    return forLabeledStatementOnly(that);
  }
  public Void forBlock(Block that) {
    forBlockDoFirst(that);
    if (prune(that)) return null;
    that.getStatements().visit(this);
    return forBlockOnly(that);
  }
  public Void forExpressionStatement(ExpressionStatement that) { 
    forExpressionStatementDoFirst(that);
    if (prune(that)) return null;
    that.getExpression().visit(this);
    return forExpressionStatementOnly(that);
  }
  public Void forSwitchStatement(SwitchStatement that) { 
    forSwitchStatementDoFirst(that);
    if (prune(that)) return null;
    that.getTest().visit(this);
    for (int i = 0; i < that.getCases().length; i++) that.getCases()[i].visit(this); 
    return forSwitchStatementOnly(that);
  }
  public Void forIfThenStatement(IfThenStatement that) { 
    forIfThenStatementDoFirst(that);
    if (prune(that)) return null;
    that.getTestExpression().visit(this);
    that.getThenStatement().visit(this);
    return forIfThenStatementOnly(that);
  }
  public Void forIfThenElseStatement(IfThenElseStatement that) { 
    forIfThenElseStatementDoFirst(that);
    if (prune(that)) return null;
    that.getTestExpression().visit(this);
    that.getThenStatement().visit(this);
    that.getElseStatement().visit(this);
    return forIfThenElseStatementOnly(that);
  }
  public Void forWhileStatement(WhileStatement that) {
    forWhileStatementDoFirst(that);
    if (prune(that)) return null;
    that.getCondition().visit(this);
    that.getCode().visit(this);
    return forWhileStatementOnly(that);
  }
  public Void forDoStatement(DoStatement that) { 
    forDoStatementDoFirst(that);
    if (prune(that)) return null;
    that.getCode().visit(this);
    that.getCondition().visit(this);
    return forDoStatementOnly(that);
  }
  public Void forForStatement(ForStatement that) { 
    forForStatementDoFirst(that);
    if (prune(that)) return null;
    that.getInit().visit(this);
    that.getCondition().visit(this);
    that.getUpdate().visit(this);
    that.getCode().visit(this);
    return forForStatementOnly(that);
  }
  public Void forLabeledBreakStatement(LabeledBreakStatement that) { 
    forLabeledBreakStatementDoFirst(that);
    if (prune(that)) return null;
    that.getLabel().visit(this);
    return forLabeledBreakStatementOnly(that);
  }
  public Void forUnlabeledBreakStatement(UnlabeledBreakStatement that) { 
    forUnlabeledBreakStatementDoFirst(that);
    if (prune(that)) return null;
    return forUnlabeledBreakStatementOnly(that);
  }
  public Void forLabeledContinueStatement(LabeledContinueStatement that) { 
    forLabeledContinueStatementDoFirst(that);
    if (prune(that)) return null;
    that.getLabel().visit(this);
    return forLabeledContinueStatementOnly(that);
  }
  public Void forUnlabeledContinueStatement(UnlabeledContinueStatement that) { 
    forUnlabeledContinueStatementDoFirst(that);
    if (prune(that)) return null;
    return forUnlabeledContinueStatementOnly(that);
  }
  public Void forVoidReturnStatement(VoidReturnStatement that) { 
    forVoidReturnStatementDoFirst(that);
    if (prune(that)) return null;
    return forVoidReturnStatementOnly(that);
  }
  public Void forValueReturnStatement(ValueReturnStatement that) { 
    forValueReturnStatementDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this);
    return forValueReturnStatementOnly(that);
  }
  public Void forThrowStatement(ThrowStatement that) { 
    forThrowStatementDoFirst(that);
    if (prune(that)) return null;
    that.getThrown().visit(this);
    return forThrowStatementOnly(that);
  }
  public Void forSynchronizedStatement(SynchronizedStatement that) { 
    forSynchronizedStatementDoFirst(that);
    if (prune(that)) return null;
    that.getLockExpr().visit(this);
    that.getBlock().visit(this);
    return forSynchronizedStatementOnly(that);
  }
  public Void forTryCatchFinallyStatement(TryCatchFinallyStatement that) { 
    forTryCatchFinallyStatementDoFirst(that);
    if (prune(that)) return null;
    that.getTryBlock().visit(this);
    for (int i = 0; i < that.getCatchBlocks().length; i++) that.getCatchBlocks()[i].visit(this);
    that.getFinallyBlock().visit(this);
    return forTryCatchFinallyStatementOnly(that);
  }
  public Void forNormalTryCatchStatement(NormalTryCatchStatement that) { 
    forNormalTryCatchStatementDoFirst(that);
    if (prune(that)) return null;
    that.getTryBlock().visit(this);
    for (int i = 0; i < that.getCatchBlocks().length; i++) that.getCatchBlocks()[i].visit(this); 
    return forNormalTryCatchStatementOnly(that);
  }
  public Void forEmptyStatement(EmptyStatement that) { 
    forEmptyStatementDoFirst(that);
    if (prune(that)) return null;
    return forEmptyStatementOnly(that);
  }
  public Void forConcreteMethodDef(ConcreteMethodDef that) { 
    forConcreteMethodDefDoFirst(that);
    if (prune(that)) return null;
    that.getMav().visit(this);
    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);
    that.getResult().visit(this);
    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);
    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this);
    that.getBody().visit(this); 
    return forConcreteMethodDefOnly(that);
  }
  public Void forAbstractMethodDef(AbstractMethodDef that) { 
    forAbstractMethodDefDoFirst(that);
    if (prune(that)) return null;
    that.getMav().visit(this);
    for (int i = 0; i < that.getTypeParams().length; i++) that.getTypeParams()[i].visit(this);
    that.getResult().visit(this);
    for (int i = 0; i < that.getParams().length; i++) that.getParams()[i].visit(this);
    for (int i = 0; i < that.getThrows().length; i++) that.getThrows()[i].visit(this); 
    return forAbstractMethodDefOnly(that);
  }
  public Void forFormalParameter(FormalParameter that) { 
    forFormalParameterDoFirst(that);
    if (prune(that)) return null;
    that.getDeclarator().visit(this);
    return forFormalParameterOnly(that);
  }
  public Void forVariableDeclaration(VariableDeclaration that) { 
    forVariableDeclarationDoFirst(that);
    if (prune(that)) return null;
    that.getMav().visit(this);
    for (int i = 0; i < that.getDeclarators().length; i++) that.getDeclarators()[i].visit(this);
    return forVariableDeclarationOnly(that);
  }
  public Void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that) { 
    forUninitializedVariableDeclaratorDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    return forUninitializedVariableDeclaratorOnly(that);
  }
  public Void forInitializedVariableDeclarator(InitializedVariableDeclarator that) { 
    forInitializedVariableDeclaratorDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    that.getInitializer().visit(this);
    return forInitializedVariableDeclaratorOnly(that);
  }
  public Void forTypeParameter(TypeParameter that) { 
    forTypeParameterDoFirst(that);
    if (prune(that)) return null;
    that.getVariable().visit(this);
    that.getBound().visit(this);
    return forTypeParameterOnly(that);
  }
  public Void forArrayInitializer(ArrayInitializer that) { 
    forArrayInitializerDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getItems().length; i++) that.getItems()[i].visit(this); 
    return forArrayInitializerOnly(that);
  }
  public Void forPrimitiveType(PrimitiveType that) { 
    forPrimitiveTypeDoFirst(that);
    if (prune(that)) return null;
    return forPrimitiveTypeOnly(that);
  }
  public Void forArrayType(ArrayType that) { 
    forArrayTypeDoFirst(that);
    if (prune(that)) return null;
    that.getElementType().visit(this);
    return forArrayTypeOnly(that);
  }
  public Void forMemberType(MemberType that) { 
    forMemberTypeDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forMemberTypeOnly(that);
  }
  public Void forClassOrInterfaceType(ClassOrInterfaceType that) { 
    forClassOrInterfaceTypeDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getTypeArguments().length; i++) that.getTypeArguments()[i].visit(this); 
    return forClassOrInterfaceTypeOnly(that);
  }
  public Void forTypeVariable(TypeVariable that) { 
    forTypeVariableDoFirst(that);
    if (prune(that)) return null;
    return forTypeVariableOnly(that);
  }
  public Void forVoidReturn(VoidReturn that) { 
    forVoidReturnDoFirst(that);
    if (prune(that)) return null;
    return forVoidReturnOnly(that);
  }
  public Void forLabeledCase(LabeledCase that) { 
    forLabeledCaseDoFirst(that);
    if (prune(that)) return null;
    that.getLabel().visit(this);
    that.getCode().visit(this);
    return forLabeledCaseOnly(that);
  }
  public Void forDefaultCase(DefaultCase that) { 
    forDefaultCaseDoFirst(that);
    if (prune(that)) return null;
    that.getCode().visit(this);
    return forDefaultCaseOnly(that);
  }
  public Void forCatchBlock(CatchBlock that) { 
    forCatchBlockDoFirst(that);
    if (prune(that)) return null;
    that.getException().visit(this);
    that.getBlock().visit(this);
    return forCatchBlockOnly(that);
  }
  public Void forSimpleAssignmentExpression(SimpleAssignmentExpression that) { 
    forSimpleAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forSimpleAssignmentExpressionOnly(that);
  }
  public Void forPlusAssignmentExpression(PlusAssignmentExpression that) { 
    forPlusAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forPlusAssignmentExpressionOnly(that);
  }
  public Void forMinusAssignmentExpression(MinusAssignmentExpression that) { 
    forMinusAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forMinusAssignmentExpressionOnly(that);
  }
  public Void forMultiplyAssignmentExpression(MultiplyAssignmentExpression that) { 
    forMultiplyAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forMultiplyAssignmentExpressionOnly(that);
  }
  public Void forDivideAssignmentExpression(DivideAssignmentExpression that) { 
    forDivideAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forDivideAssignmentExpressionOnly(that);
  }
  public Void forModAssignmentExpression(ModAssignmentExpression that) { 
    forModAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forModAssignmentExpressionOnly(that);
  }
  public Void forLeftShiftAssignmentExpression(LeftShiftAssignmentExpression that) { 
    forLeftShiftAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forLeftShiftAssignmentExpressionOnly(that);
  }
  public Void forRightSignedShiftAssignmentExpression(RightSignedShiftAssignmentExpression that) { 
    forRightSignedShiftAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forRightSignedShiftAssignmentExpressionOnly(that);
  }
  public Void forRightUnsignedShiftAssignmentExpression(RightUnsignedShiftAssignmentExpression that) { 
    forRightUnsignedShiftAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forRightUnsignedShiftAssignmentExpressionOnly(that);
  }
  public Void forBitwiseAndAssignmentExpression(BitwiseAndAssignmentExpression that) { 
    forBitwiseAndAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forBitwiseAndAssignmentExpressionOnly(that);
  }
  public Void forBitwiseOrAssignmentExpression(BitwiseOrAssignmentExpression that) { 
    forBitwiseOrAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forBitwiseOrAssignmentExpressionOnly(that);
  }
  public Void forBitwiseXorAssignmentExpression(BitwiseXorAssignmentExpression that) { 
    forBitwiseXorAssignmentExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getValue().visit(this);
    return forBitwiseXorAssignmentExpressionOnly(that);
  }
  public Void forOrExpression(OrExpression that) { 
    forOrExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forOrExpressionOnly(that);
  }
  public Void forAndExpression(AndExpression that) { 
    forAndExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forAndExpressionOnly(that);
  }
  public Void forBitwiseOrExpression(BitwiseOrExpression that) { 
    forBitwiseOrExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forBitwiseOrExpressionOnly(that);
  }
  public Void forBitwiseXorExpression(BitwiseXorExpression that) { 
    forBitwiseXorExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forBitwiseXorExpressionOnly(that);
  }
  public Void forBitwiseAndExpression(BitwiseAndExpression that) { 
    forBitwiseAndExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forBitwiseAndExpressionOnly(that);
  }
  public Void forEqualsExpression(EqualsExpression that) { 
    forEqualsExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forEqualsExpressionOnly(that);
  }
  public Void forNotEqualExpression(NotEqualExpression that) { 
    forNotEqualExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forNotEqualExpressionOnly(that);
  }
  public Void forLessThanExpression(LessThanExpression that) { 
    forLessThanExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forLessThanExpressionOnly(that);
  }
  public Void forLessThanOrEqualExpression(LessThanOrEqualExpression that) { 
    forLessThanOrEqualExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forLessThanOrEqualExpressionOnly(that);
  }
  public Void forGreaterThanExpression(GreaterThanExpression that) { 
    forGreaterThanExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forGreaterThanExpressionOnly(that);
  }
  public Void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that) { 
    forGreaterThanOrEqualExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forGreaterThanOrEqualExpressionOnly(that);
  }
  public Void forLeftShiftExpression(LeftShiftExpression that) { 
    forLeftShiftExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forLeftShiftExpressionOnly(that);
  }
  public Void forRightSignedShiftExpression(RightSignedShiftExpression that) { 
    forRightSignedShiftExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forRightSignedShiftExpressionOnly(that);
  }
  public Void forRightUnsignedShiftExpression(RightUnsignedShiftExpression that) { 
    forRightUnsignedShiftExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this);
    return forRightUnsignedShiftExpressionOnly(that);
  }
  public Void forPlusExpression(PlusExpression that) { 
    forPlusExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this); 
    return forPlusExpressionOnly(that);
  }
  public Void forMinusExpression(MinusExpression that) { 
    forMinusExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this); 
    return forMinusExpressionOnly(that);
  }
  public Void forMultiplyExpression(MultiplyExpression that) { 
    forMultiplyExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this); 
    return forMultiplyExpressionOnly(that);
  }
  public Void forDivideExpression(DivideExpression that) { 
    forDivideExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this); 
    return forDivideExpressionOnly(that);
  }
  public Void forModExpression(ModExpression that) { 
    forModExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this); 
    return forModExpressionOnly(that);
  }
  public Void forNoOpExpression(NoOpExpression that) { 
    forNoOpExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getLeft().visit(this);
    that.getRight().visit(this); 
    return forNoOpExpressionOnly(that); 
  }
  public Void forPositivePrefixIncrementExpression(PositivePrefixIncrementExpression that) { 
    forPositivePrefixIncrementExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forPositivePrefixIncrementExpressionOnly(that); 
  }
  public Void forNegativePrefixIncrementExpression(NegativePrefixIncrementExpression that) { 
    forNegativePrefixIncrementExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forNegativePrefixIncrementExpressionOnly(that); 
  }
  public Void forPositivePostfixIncrementExpression(PositivePostfixIncrementExpression that) { 
    forPositivePostfixIncrementExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forPositivePostfixIncrementExpressionOnly(that); 
  }
  public Void forNegativePostfixIncrementExpression(NegativePostfixIncrementExpression that) { 
    forNegativePostfixIncrementExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forNegativePostfixIncrementExpressionOnly(that); 
  }
  public Void forPositiveExpression(PositiveExpression that) { 
    forPositiveExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forPositiveExpressionOnly(that); 
  }
  public Void forNegativeExpression(NegativeExpression that) { 
    forNegativeExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forNegativeExpressionOnly(that); 
  }
  public Void forBitwiseNotExpression(BitwiseNotExpression that) { 
    forBitwiseNotExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forBitwiseNotExpressionOnly(that); 
  }
  public Void forNotExpression(NotExpression that) { 
    forNotExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this); 
    return forNotExpressionOnly(that); 
  }
  public Void forConditionalExpression(ConditionalExpression that) { 
    forConditionalExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getCondition().visit(this);
    that.getForTrue().visit(this);
    that.getForFalse().visit(this); 
    return forConditionalExpressionOnly(that); 
  }
  public Void forInstanceofExpression(InstanceofExpression that) { 
    forInstanceofExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this);
    that.getType().visit(this); 
    return forInstanceofExpressionOnly(that); 
  }
  public Void forCastExpression(CastExpression that) { 
    forCastExpressionDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    that.getValue().visit(this); 
    return forCastExpressionOnly(that); 
  }
  public Void forIntegerLiteral(IntegerLiteral that) { 
    forIntegerLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forIntegerLiteralOnly(that); 
  }
  public Void forLongLiteral(LongLiteral that) { 
    forLongLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forLongLiteralOnly(that); 
  }
  public Void forDoubleLiteral(DoubleLiteral that) { 
    forDoubleLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forDoubleLiteralOnly(that); 
  }
  public Void forFloatLiteral(FloatLiteral that) { 
    forFloatLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forFloatLiteralOnly(that); 
  }
  public Void forBooleanLiteral(BooleanLiteral that) { 
    forBooleanLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forBooleanLiteralOnly(that); 
  }
  public Void forCharLiteral(CharLiteral that) { 
    forCharLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forCharLiteralOnly(that); 
  }
  public Void forStringLiteral(StringLiteral that) { 
    forStringLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forStringLiteralOnly(that); 
  }
  public Void forNullLiteral(NullLiteral that) { 
    forNullLiteralDoFirst(that);
    if (prune(that)) return null; 
    return forNullLiteralOnly(that); 
  }
  public Void forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that) { 
    forSimpleNamedClassInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    that.getArguments().visit(this); 
    return forSimpleNamedClassInstantiationOnly(that); 
  }
  public Void forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that) { 
    forComplexNamedClassInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getType().visit(this);
    that.getArguments().visit(this); 
    return forComplexNamedClassInstantiationOnly(that); 
  }
  public Void forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that) { 
    forSimpleAnonymousClassInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    that.getArguments().visit(this);
    that.getBody().visit(this); 
    return forSimpleAnonymousClassInstantiationOnly(that); 
  }
  public Void forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that) { 
    forComplexAnonymousClassInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getType().visit(this);
    that.getArguments().visit(this);
    that.getBody().visit(this); 
    return forComplexAnonymousClassInstantiationOnly(that); 
  }
  public Void forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that) { 
    forSimpleUninitializedArrayInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    that.getDimensionSizes().visit(this); 
    return forSimpleUninitializedArrayInstantiationOnly(that); 
  }
  public Void forComplexUninitializedArrayInstantiation(ComplexUninitializedArrayInstantiation that) { 
    forComplexUninitializedArrayInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getType().visit(this);
    that.getDimensionSizes().visit(this); 
    return forComplexUninitializedArrayInstantiationOnly(that); 
  }
  public Void forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that) { 
    forSimpleInitializedArrayInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this);
    that.getInitializer().visit(this); 
    return forSimpleInitializedArrayInstantiationOnly(that); 
  }
  public Void forComplexInitializedArrayInstantiation(ComplexInitializedArrayInstantiation that) { 
    forComplexInitializedArrayInstantiationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getType().visit(this);
    that.getInitializer().visit(this); 
    return forComplexInitializedArrayInstantiationOnly(that); 
  }
  public Void forSimpleNameReference(SimpleNameReference that) { 
    forSimpleNameReferenceDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    return forSimpleNameReferenceOnly(that); 
  }
  public Void forComplexNameReference(ComplexNameReference that) { 
    forComplexNameReferenceDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getName().visit(this); 
    return forComplexNameReferenceOnly(that); 
  }
  public Void forSimpleThisReference(SimpleThisReference that) { 
    forSimpleThisReferenceDoFirst(that);
    if (prune(that)) return null; 
    return forSimpleThisReferenceOnly(that); 
  }
  public Void forComplexThisReference(ComplexThisReference that) { 
    forComplexThisReferenceDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this); 
    return forComplexThisReferenceOnly(that); 
  }
  public Void forSimpleSuperReference(SimpleSuperReference that) { 
    forSimpleSuperReferenceDoFirst(that);
    if (prune(that)) return null; 
    return forSimpleSuperReferenceOnly(that); 
  }
  public Void forComplexSuperReference(ComplexSuperReference that) { 
    forComplexSuperReferenceDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this); 
    return forComplexSuperReferenceOnly(that); 
  }
  public Void forSimpleMethodInvocation(SimpleMethodInvocation that) { 
    forSimpleMethodInvocationDoFirst(that);
    if (prune(that)) return null;
    that.getName().visit(this);
    that.getArguments().visit(this); 
    return forSimpleMethodInvocationOnly(that); 
  }
  public Void forComplexMethodInvocation(ComplexMethodInvocation that) { 
    forComplexMethodInvocationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getName().visit(this);
    that.getArguments().visit(this); 
    return forComplexMethodInvocationOnly(that); 
  }
  public Void forSimpleThisConstructorInvocation(SimpleThisConstructorInvocation that) { 
    forSimpleThisConstructorInvocationDoFirst(that);
    if (prune(that)) return null;
    that.getArguments().visit(this); 
    return forSimpleThisConstructorInvocationOnly(that); 
  }
  public Void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that) { 
    forComplexThisConstructorInvocationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getArguments().visit(this); 
    return forComplexThisConstructorInvocationOnly(that); 
  }
  public Void forSimpleSuperConstructorInvocation(SimpleSuperConstructorInvocation that) { 
    forSimpleSuperConstructorInvocationDoFirst(that);
    if (prune(that)) return null;
    that.getArguments().visit(this); 
    return forSimpleSuperConstructorInvocationOnly(that); 
  }
  public Void forComplexSuperConstructorInvocation(ComplexSuperConstructorInvocation that) { 
    forComplexSuperConstructorInvocationDoFirst(that);
    if (prune(that)) return null;
    that.getEnclosing().visit(this);
    that.getArguments().visit(this); 
    return forComplexSuperConstructorInvocationOnly(that); 
  }
  public Void forClassLiteral(ClassLiteral that) {
    forClassLiteralDoFirst(that);
    if (prune(that)) return null;
    that.getType().visit(this); 
    return forClassLiteralOnly(that); 
  }
  public Void forArrayAccess(ArrayAccess that) {
    forArrayAccessDoFirst(that);
    if (prune(that)) return null;
    that.getArray().visit(this);
    that.getIndex().visit(this);
    return forArrayAccessOnly(that); 
  }
  public Void forParenthesized(Parenthesized that) {
    forParenthesizedDoFirst(that);
    if (prune(that)) return null;
    that.getValue().visit(this);
    return forParenthesizedOnly(that); 
  }
  public Void forEmptyExpression(EmptyExpression that) {
    forEmptyExpressionDoFirst(that);
    if (prune(that)) return null;
    return forEmptyExpressionOnly(that); 
  }
//  public void forEmptyDimensionExpression(EmptyDimensionExpression that) {
//    forEmptyDimensionExpressionDoFirst(that);
//    if (prune(that)) return;
//    forEmptyDimensionExpressionOnly(that);
//  }
  
  public Void forBracedBody(BracedBody that) { 
    forBracedBodyDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getStatements().length; i++) that.getStatements()[i].visit(this); 
    return forBracedBodyOnly(that);
  }
  public Void forUnbracedBody(UnbracedBody that) { 
    forUnbracedBodyDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getStatements().length; i++) that.getStatements()[i].visit(this); 
    return forUnbracedBodyOnly(that);
  }
  public Void forParenthesizedExpressionList(ParenthesizedExpressionList that) { 
    forParenthesizedExpressionListDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);
    return forParenthesizedExpressionListOnly(that);
  }
  public Void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that) { 
    forUnparenthesizedExpressionListDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this); 
    return forUnparenthesizedExpressionListOnly(that);
  }
  public Void forDimensionExpressionList(DimensionExpressionList that) { 
    forDimensionExpressionListDoFirst(that);
    if (prune(that)) return null;
    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this); 
    return forDimensionExpressionListOnly(that); }  
  public Void forEmptyForCondition(EmptyForCondition that) { 
    forEmptyForConditionDoFirst(that);
    if (prune(that)) return null; 
    return forEmptyForConditionOnly(that);
  }
  /** This method is called by default from cases that do not override forCASEDoFirst. */
  protected Void defaultDoFirst(JExpressionIF that) { return null; }
  /** This method is called by default from cases that do not override forCASEOnly. */
  protected Void defaultCase(JExpressionIF that) { return null; } 
  protected boolean prune(JExpressionIF that) { return true; }
}
